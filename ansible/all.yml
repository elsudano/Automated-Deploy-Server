- name: Apply base configuration for anyone cloud
  hosts: 
    - all

  become_method: sudo
  become_user: root
  become: true

  pre_tasks:
    - name: Clean all yum cache
      yum:
        clean: yes
      tags: always
      when: not ansible_check_mode and ansible_os_family == 'RedHat'

    - name: Clean all apt cache
      apt:
        purge: yes
      tags: always
      when: not ansible_check_mode and ansible_os_family == 'Debian'

    - name: Install dependencies for all playbooks in ReadHat
      package:
        name: "{{ item }}"
        state: present
      tags: always
      when: not ansible_check_mode and ansible_os_family == 'RedHat'
      with_items:
        - python-firewall.noarch
        - firewalld
        - python2-pip.noarch
        - python3-pip.noarch
        - python2-certbot-dns-ovh.noarch
        - libselinux-python.x86_64
        - net-tools

    - name: Install dependencies for all playbooks in Debian
      package:
        name: "{{ item }}"
        state: present
      tags: always
      when: not ansible_check_mode and ansible_os_family == 'Debian'
      with_items:
        - selinux-basics
        - selinux-policy-default
        - python3-firewall
        - firewalld
        # - python3-pip
        - python3-certbot-dns-ovh
        - python3-certbot-nginx
        - python3-selinux
        - net-tools

    - name: Remove unused packages in Debian
      package:
        name: "{{ item }}"
        state: absent
      tags: always
      when: not ansible_check_mode and ansible_os_family == 'Debian'
      with_items:
        - snapd

    - name: Disable SELinux
      selinux:
        state: disabled
      tags: always
      register: task_result

    - name: Reboot immediately if there was a change.
      shell: "sleep 5 && reboot"
      async: 1
      poll: 0
      when: task_result is changed and not ansible_check_mode
      tags: always

    - name: Wait for the reboot to complete if there was a change.
      wait_for_connection:
        connect_timeout: 20
        sleep: 1
        delay: 5
        timeout: 300
      when: task_result is changed and not ansible_check_mode
      tags: always

    - name: Install epel repository
      package:
        name: [ 'epel-release' ]
        state: present
      tags: always
      when: not ansible_check_mode and ansible_distribution == 'CentOS'
  
    - name: Upgrade all packages
      tags: always
      package:
        name: '*'
        state: latest

    - name: Disable IPv6 for all interfaces
      tags: always
      sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        sysctl_set: yes
        state: present
        reload: yes
      with_items:
        - { key: net.ipv6.conf.all.disable_ipv6, value: 1 }
        - { key: net.ipv6.conf.default.disable_ipv6, value: 1 }

    - name: Disable and stop the firewalld service
      service:
        name: firewalld
        state: stopped
        enabled: false
      when: distribution == "CentOS" and distribution_major_version == "7"
      tags: [ 'never', 'debug' ]

    - name: Change a root password
      tags: always
      user:
        name: root
        update_password: always
        password: "{{ root_password | password_hash('sha512') }}"

    - name: Change configuration of SSH daemon to root permit remote login with key
      tags: always
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regex }}"
        line: "{{ item.line }}"
        state: present
      register: change_ssh_config
      # notify: "Restart SSH"
      with_items:
        - { regex: '^PermitRootLogin no', line: 'PermitRootLogin yes' }
        - { regex: '^X11Forwarding yes',line: 'X11Forwarding no' }
        - { regex: '^HostKey /etc/ssh/ssh_host_ecdsa_key',line: '#HostKey /etc/ssh/ssh_host_ecdsa_key' }
        - { regex: '^HostKey /etc/ssh/ssh_host_ed25519_key',line: '#HostKey /etc/ssh/ssh_host_ed25519_key' }

    - name: Set both authorized key to root user
      tags: always
      authorized_key:
        user: root
        state: present
        key: "{{ item }}"
      with_items:
        - "{{ gn_file_pub_rsa_dev }}"
        - "{{ gn_file_pub_rsa_pro }}"

    - name: Ensure that the users groups exist
      tags: always
      group:
        name: "{{ item.group }}"
        gid: "{{ item.gid }}"
        state: present
      with_items:
        - "{{ gn_users }}"

    - name: Create a users in the system
      tags: always
      user:
        name: "{{ item.name }}"
        uid: "{{ item.uid }}"
        group: "{{ item.group }}"
        password: "{{ user_password | password_hash('sha512') }}"
        home: "{{ item.home }}"
        create_home: yes
        comment: "{{ item.comment }}"
        shell: /bin/bash
        update_password: always
      when: not ansible_check_mode
      with_items:
        - "{{ gn_users }}"

    - name: Copy the OVH config file to instance
      tags: always
      copy:
        src: vault/ovh.ini
        dest: "{{ default_config_folder }}/ovh.ini"
        owner: "{{ default_name_user }}"
        mode: "0600"
      no_log: "{{ set_no_log }}"

    - name: Set authorized key taken from file for {{ default_name_user }}
      tags: always
      authorized_key:
        user: "{{ default_name_user }}"
        state: present
        key: "{{ gn_file_pub_rsa_pro }}"
      when: not ansible_check_mode

    - name: Allow {{ default_name_user }} to have passwordless sudo
      tags: always
      lineinfile:
        dest: /etc/sudoers.d/{{ default_name_user }}
        state: present
        create: yes
        line: "{{ default_name_user }} ALL=(ALL) NOPASSWD: ALL"
        validate: 'visudo -cf %s'

    - name: Create all the folders that we need
      tags: always
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ default_name_user }}"
        group: "{{ default_group_user }}"
        mode: 0775
      with_items: "{{ all_folders }}"