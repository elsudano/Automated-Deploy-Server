- name: Apply base configuration for anyone cloud
  hosts: 
    - all

  become_method: sudo
  become_user: root
  become: true

  pre_tasks:
    - name: Clean all yum data
      command: yum clean all
      args:
        warn: false
      tags: always

    - name: Disable SELinux
      selinux:
        state: disabled
      tags: always
      register: task_result

    - name: Reboot immediately if there was a change.
      shell: "sleep 5 && reboot"
      async: 1
      poll: 0
      when: task_result is changed and not ansible_check_mode
      tags: always

    - name: Wait for the reboot to complete if there was a change.
      wait_for_connection:
        connect_timeout: 20
        sleep: 1
        delay: 5
        timeout: 300
      when: task_result is changed and not ansible_check_mode
      tags: always

    - name: Install epel repository
      package:
        name: [ 'epel-release' ]
        state: present
      tags: always
      when: not ansible_check_mode and ansible_distribution == 'CentOS'

    - name: Install dependencies for all playbooks
      package:
        name: [ 'python-firewall.noarch', 'firewalld', 'python2-pip.noarch', 'python3-pip.noarch', 'python2-certbot-dns-ovh.noarch', 'libselinux-python.x86_64']
        state: present
      tags: always
      when: not ansible_check_mode

  tasks:
    - name: Upgrade all packages
      yum:
        name: '*'
        state: latest

    - name: Disable IPv& for all interfaces
      sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        sysctl_set: yes
        state: present
        reload: yes
      with_items:
        - { key: net.ipv6.conf.all.disable_ipv6, value: 1 }
        - { key: net.ipv6.conf.default.disable_ipv6, value: 1 }

    - name: Disable and stop the firewalld service
      service:
        name: firewalld
        state: stopped
        enabled: false
      when: distribution == "CentOS" and distribution_major_version == "7"
      tags: [ 'never', 'debug' ]

    - name: Change a root password
      user:
        name: root
        update_password: always
        password: "{{ root_password | password_hash('sha512') }}"

    - name: Change configuration of SSH daemon to root permit remote login with key
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regex }}"
        line: "{{ item.line }}"
        state: present
      register: change_ssh_config
      notify: "Restart SSH"
      with_items:
        - { regex: '^PermitRootLogin no', line: 'PermitRootLogin yes' }
        - { regex: '^X11Forwarding yes',line: 'X11Forwarding no' }
        - { regex: '^HostKey /etc/ssh/ssh_host_ecdsa_key',line: '#HostKey /etc/ssh/ssh_host_ecdsa_key' }
        - { regex: '^HostKey /etc/ssh/ssh_host_ed25519_key',line: '#HostKey /etc/ssh/ssh_host_ed25519_key' }

    - name: Set both authorized key to root user
      authorized_key:
        user: root
        state: present
        key: "{{ item }}"
      with_items:
        - "{{ gn_file_pub_rsa_dev }}"
        - "{{ gn_file_pub_rsa_pro }}"

    - name: Ensure group {{ dk_group_user }} exists
      group:
        name: "{{ dk_group_user }}"
        gid: "{{ dk_gid_user }}"
        state: present

    - name: Create a user by default
      user:
        name: "{{ dk_name_user }}"
        uid: "{{ dk_uid_user }}"
        group: "{{ dk_group_user }}"
        password: "{{ user_password | password_hash('sha512') }}"
        home: "{{ dk_config_folder }}"
        create_home: yes
        comment: Usuario gen√©rico
        shell: /bin/bash
        update_password: always
      when: not ansible_check_mode

    - name: Set authorized key taken from file
      authorized_key:
        user: "{{ dk_name_user }}"
        state: present
        key: "{{ gn_file_pub_rsa_pro }}"
      when: not ansible_check_mode

    - name: Allow {{ dk_name_user }} to have passwordless sudo
      lineinfile:
        dest: /etc/sudoers.d/{{ dk_name_user }}
        state: present
        create: yes
        line: "{{ dk_name_user }} ALL=(ALL) NOPASSWD: ALL"
        validate: 'visudo -cf %s'

    - name: Create all the folders that we need
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ dk_name_user }}"
        group: "{{ dk_group_user }}"
      with_items: "{{ all_folders }}"