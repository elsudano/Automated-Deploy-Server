- name: Setting the correct interpreter of python 
  set_fact:
    ansible_python_interpreter: "/usr/bin/python3"
  tags: always

- name: Delete all container
  docker_container:
    name: "{{ item }}"
    keep_volumes: yes
    state: absent
  with_items:
    - mariadb
    - redis
    - app
    - cron
    - letsencrypt
  tags: always

- name: Clean all containers and related things
  docker_prune:
    containers: yes
    images: yes
    networks: yes
    volumes: yes
    builder_cache: yes
  register: output
  tags: always

- name: Debug the previous var output line 14
  debug:
    var: output
  tags: debug

- name: Create all containers of the Nextcloud application
  docker_compose:
    project_name: nextcloud
    definition:
      version: "3"
      services:
        # letsencrypt:
        #   image: linuxserver/letsencrypt
        #   container_name: letsencrypt
        #   cap_add:
        #     - NET_ADMIN
        #   environment:
        #     - PUID={{ uid_user }}
        #     - PGID={{ gid_user }}
        #     - TZ=Europe/London
        #     - URL={{ domain }}
        #     - SUBDOMAINS=www,nc,web,
        #     - VALIDATION=dns
        #     - DNSPLUGIN=ovh #optional
        #     # - DUCKDNSTOKEN=<token> #optional
        #     # - EMAIL=<e-mail> #optional
        #     # - DHLEVEL=2048 #optional
        #     # - ONLY_SUBDOMAINS=false #optional
        #     # - EXTRA_DOMAINS=<extradomains> #optional
        #     # - STAGING=false #optional
        #   volumes:
        #     - "{{ config_folder }}:/config"
        #   ports:
        #     - 443:443
        #     - 80:80 #optional
        #   restart: unless-stopped
        #   depends_on:
        #     - db

        db:
          image: linuxserver/mariadb
          container_name: mariadb
          environment:
            - PUID={{ uid_user }}
            - PGID={{ gid_user }}
            - TZ=Europe/London
            - MYSQL_ROOT_PASSWORD={{ mysql_root_pass }}
            - MYSQL_DATABASE={{ mysql_db_name }}
            - MYSQL_USER={{ mysql_db_user }}
            - MYSQL_PASSWORD={{ mysql_db_pass }}
            #- REMOTE_SQL=http://URL1/your.sql,https://URL2/your.sql #optional
          volumes:
            - "{{ db_folder }}:/config"
          # ports:
          #   - 3306:3306
          restart: always

        # redis:
        #   image: redis:alpine
        #   container_name: redis
        #   restart: always

        # app:
        #   image: nextcloud:production-fpm
        #   container_name: app
        #   links:
        #     - db
        #   restart: always
        #   volumes:
        #     - "{{ app_folder }}:/var/www/html"
        #   environment:
        #     - MYSQL_HOST=db
        #     - REDIS_HOST=redis
        #     - MYSQL_DATABASE={{ mysql_db_name }}
        #     - MYSQL_USER={{ mysql_db_user }}
        #     - MYSQL_PASSWORD={{ mysql_db_pass }}
        #     - NEXTCLOUD_ADMIN_USER={{ name_user }}
        #     - NEXTCLOUD_ADMIN_PASSWORD={{ user_password }}
        #   depends_on:
        #     - db
        #     - letsencrypt
        #     - redis

        # cron:
        #   image: nextcloud:fpm-alpine
        #   container_name: cron
        #   restart: always
        #   volumes:
        #     - "{{ app_folder }}:/var/www/html"
        #   entrypoint: /cron.sh
        #   depends_on:
        #     - db
        #     - redis

  # environment:
  #   - MYSQL_HOST: db
  #   - REDIS_HOST: redis
  #   - MYSQL_DATABASE: "{{ mysql_db_name }}"
  #   - MYSQL_USER: "{{ mysql_db_user }}"
  #   - MYSQL_PASSWORD: "{{ mysql_db_pass }}"
  #   - NEXTCLOUD_ADMIN_USER: "{{ name_user }}"
  #   - NEXTCLOUD_ADMIN_PASSWORD: "{{ user_password }}"
  #   - NEXTCLOUD_DATA_DIR: "{{ data_folder }}"
  register: output
  tags: always

- name: Debug the previous var output line 78
  debug:
    var: output
  tags: debug

# - name: Create a Docker network
#   docker_network:
#     name: nextcloud_network
#     connected:
#       - letsencrypt
#       - mariadb
#   register: output
#   tags: always

# - name: Debug the previous var output line 23
#   debug:
#     var: output
#   tags: debug

# - name: sleep for 20 seconds and continue with play
#   wait_for:
#     timeout: 20
#   delegate_to: localhost

- name: Copy the OVH config file to instance
  copy:
    src: vault/ovh.ini
    dest: "{{ config_folder }}/dns-conf/ovh.ini"
    owner: "{{ name_user }}"
    mode: "0644"
  tags: always
